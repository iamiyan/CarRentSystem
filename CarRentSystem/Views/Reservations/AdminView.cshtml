@{
    var userRole = Context.Session.GetString("UserRole");
}

@if (string.IsNullOrEmpty(userRole) || userRole != "Admin")
{
    <script>
        window.location.href = "/Auth/Login"; // Redirect to login if not an Admin
    </script>
}
else
{
    <div class="container mt-4">
        <h2 class="text-center"><i class="bi bi-list-check"></i> All Reservations</h2>

        <div id="loadingMessage" class="text-center text-primary mt-3">
            <i class="bi bi-hourglass-split"></i> Loading reservations...
        </div>

        <div id="noReservationsMessage" class="alert alert-info text-center mt-3" style="display: none;">
            <i class="bi bi-info-circle"></i> No reservations found.
        </div>

        <div class="table-responsive">
            <table class="table table-hover shadow-sm">
                <thead class="table-dark">
                    <tr>
                        <th><i class="bi bi-person"></i> User Name</th>
                        <th><i class="bi bi-car-front"></i> Car Model</th>
                        <th><i class="bi bi-calendar"></i> Start Date</th>
                        <th><i class="bi bi-calendar"></i> End Date</th>
                        <th><i class="bi bi-cash-stack"></i> Total Price (RM)</th>
                        <th><i class="bi bi-check-circle"></i> Status</th>
                        <th><i class="bi bi-gear"></i> Actions</th>
                    </tr>
                </thead>
                <tbody id="adminReservationTableBody">
                    <!-- Reservations will be loaded dynamically -->
                </tbody>
            </table>
        </div>
    </div>
}

<script>
    function formatDate(dateString) {
        let date = new Date(dateString);
        return date.toLocaleDateString('en-GB'); // ✅ Formats as dd-mm-yyyy
    }

    document.addEventListener("DOMContentLoaded", function () {
        loadReservations();

        // ✅ Auto refresh every 10 seconds for real-time updates
        setInterval(loadReservations, 10000);
    });

    function loadReservations() {
        fetch("/api/reservations") // Fetch all reservations
            .then(response => response.json())
            .then(reservations => {
                let tableBody = document.getElementById("adminReservationTableBody");
                let loadingMessage = document.getElementById("loadingMessage");
                let noReservationsMessage = document.getElementById("noReservationsMessage");

                loadingMessage.style.display = "none"; // Hide loading message

                if (!Array.isArray(reservations)) {
                    console.error("Error: API response is not an array!", reservations);
                    noReservationsMessage.style.display = "block";
                    return;
                }

                if (reservations.length === 0) {
                    noReservationsMessage.style.display = "block";
                    return;
                }

                tableBody.innerHTML = ""; // Clear previous data

                reservations.forEach(reservation => {
                    let statusBadge = getStatusBadge(reservation.status);

                    let row = `<tr>
                        <td><i class="bi bi-person"></i> ${reservation.userName}</td>
                        <td><i class="bi bi-car-front"></i> ${reservation.carModel}</td>
                        <td>${formatDate(reservation.startDate)}</td>  <!-- ✅ Format dd-mm-yyyy -->
                        <td>${formatDate(reservation.endDate)}</td>  <!-- ✅ Format dd-mm-yyyy -->
                        <td><strong>RM ${reservation.totalPrice.toFixed(2)}</strong></td>
                        <td>${statusBadge}</td>
                        <td>
                            <button class="btn btn-warning btn-sm" onclick="editReservation(${reservation.id})">
                                <i class="bi bi-pencil-square"></i> Edit
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="deleteReservation(${reservation.id})">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </td>
                    </tr>`;
                    tableBody.innerHTML += row;
                });
            })
            .catch(error => {
                console.error("Error loading reservations:", error);
                document.getElementById("loadingMessage").style.display = "none";
                document.getElementById("noReservationsMessage").style.display = "block";
            });
    }


    function getStatusBadge(status) {
        switch (status) {
            case "Pending":
                return `<span class="badge bg-warning text-dark"><i class="bi bi-hourglass-split"></i> Pending</span>`;
            case "Approved":
                return `<span class="badge bg-success"><i class="bi bi-check-circle"></i> Approved</span>`;
            case "Rejected":
                return `<span class="badge bg-danger"><i class="bi bi-x-circle"></i> Rejected</span>`;
            case "Canceled":
                return `<span class="badge bg-secondary"><i class="bi bi-slash-circle"></i> Canceled</span>`;
            default:
                return `<span class="badge bg-secondary">Unknown</span>`;
        }
    }

    function editReservation(reservationId) {
        window.location.href = `/Reservations/AdminEdit?id=${reservationId}`;  // ✅ Updated to use query string
    }

    function deleteReservation(reservationId) {
        console.log("Deleting reservation with ID:", reservationId); // Debugging log

        if (!confirm("Are you sure you want to delete this reservation?")) {
            return;
        }

        fetch(`/api/reservations/Delete/${reservationId}`, { // Ensure correct API URL
            method: "DELETE",
            headers: { "Content-Type": "application/json" }
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => { throw new Error(text); });
            }
            return response.json();
        })
        .then(data => {
            alert(data.message);
            loadReservations(); // ✅ Reload reservations after delete
        })
        .catch(error => {
            console.error("Error:", error);
            alert("Failed to delete reservation: " + error.message);
        });
    }
</script>
